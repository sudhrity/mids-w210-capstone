log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area,
index = c(zipcode, year), data = microClimatePanel, model = 'within')
totalRobust <- coeftest(feM1, vcov = vcovHC(feM1, type = 'HC3'))
cInterval <- coefci(feM1, vcov. = vcovHC(feM1, type = 'HC3'))
summary(feM1)
feM1 <- plm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'within')
summary(feM1)
feM1 <- plm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'fd')
summary(feM1)
feM1 <- plm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'random')
summary(feM1)
feM1 <- plm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'random')
totalRobust <- coeftest(feM1, vcov = vcovHC(feM1, type = 'HC3'))
cInterval <- coefci(feM1, vcov. = vcovHC(feM1, type = 'HC3'))
summary(feM1)
feM1 <- plm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + soil_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'random')
totalRobust <- coeftest(feM1, vcov = vcovHC(feM1, type = 'HC3'))
cInterval <- coefci(feM1, vcov. = vcovHC(feM1, type = 'HC3'))
summary(feM1)
feM1 <- plm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + soil_area + turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'random')
totalRobust <- coeftest(feM1, vcov = vcovHC(feM1, type = 'HC3'))
cInterval <- coefci(feM1, vcov. = vcovHC(feM1, type = 'HC3'))
summary(feM1)
feM1 <- plm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + soil_area + turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'within')
reM1 <- plm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + soil_area + turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'random')
phtest(feM1, reM1)
OLSM1 <- lm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + soil_area + turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
data = microClimatePanel)
feM1 <- plm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + soil_area + turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'within')
pFtest(feM1, OLSM1)
feM2FixedTime <- plm(
log(lst_day_mean) ~ 0 + tree_area + lawn_area + water_area + soil_area + turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'within')
pfTest(feM1,feM2FixedTime)
pFtest(feM1,feM2FixedTime)
plmtest(feM1, effect="time", type="bp")
pbgtest(feM1)
coeftest(feM1)
coeftest(feM1, vcovHC)
plmtest(feM1, effect="time", type="bp")
pFtest(feM1,feM2FixedTime)
pbgtest(feM1)
coeftest(feM1, vcovHC)
coeftest(feM1, vcovHC(fixed, method = "arellano"))
coeftest(feM1, vcovHC(feM1, method = "arellano"))
t(sapply(c("HC0", "HC1", "HC2", "HC3", "HC4"), function(x) sqrt(diag(vcovHC(feM1, method = "arellano", type = x)))))
totalRobust <- coeftest(feM1, vcov = vcovHC(feM1, type = 'HC0'))
cInterval <- coefci(feM1, vcov. = vcovHC(feM1, type = 'HC0'))
summary(feM1)
print(totalRobust)
print(cInterval)
qqnorm(residuals(feM1), ylab = 'Residuals')
qqline(residuals(feM1))
hist(residuals(feM1), xlab = 'Residuals')
plot(preds, residuals(feM1))
sst <- with(microClimatePanel, sum((lst_day_mean - mean(lst_day_mean))^2))
m1.sse <- t(residuals(feM1)) %*% residuals(feM1)
(sst - m1.sse) / sst
m1.r2 <- (sst - m1.sse) / sst
N <- dim(microClimatePanel)[1]
1 - (1 - m1.r2)*((N - 1)/(N - length(coef(feM1)) - 1))
microClimatePanel$lst_day_mean - residuals(feM1)
# An example fitted-vs-observed plot
plot(microClimatePanel$lst_day_mean - residuals(feM1), microClimatePanel$lst_day_mean, asp = 1)
abline(0, 1, col = 'red', lty = 'dashed', lwd = 2)
t(sapply(c("HC0", "HC1", "HC2", "HC3", "HC4"), function(x) sqrt(diag(vcovHC(feM1, method = "arellano", type = x)))))
qqnorm(residuals(feM1), ylab = 'Residuals')
qqline(residuals(feM1))
hist(residuals(feM1), xlab = 'Residuals')
# An example fitted-vs-observed plot
plot(microClimatePanel$lst_day_mean - residuals(feM1))
abline(0, 1, col = 'red', lty = 'dashed', lwd = 2)
summary(feM1)
print(totalRobust)
library(rmarkdown)
detach("package:rmarkdown", unload = TRUE)
library(rmarkdown)
detach("package:rmarkdown", unload = TRUE)
library(rmarkdown)
detach("package:rmarkdown", unload = TRUE)
library(rmarkdown)
detach("package:rmarkdown", unload = TRUE)
library(rmarkdown)
detach("package:rmarkdown", unload = TRUE)
library(rmarkdown)
detach("package:rmarkdown", unload = TRUE)
library(rmarkdown)
detach("package:rmarkdown", unload = TRUE)
library(rmarkdown)
detach("package:rmarkdown", unload = TRUE)
library(rmarkdown)
library(xfun)
install.packages('rmarkdown')
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages('rmarkdown')
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
remove.packages("rmarkdown", lib="~/R/win-library/4.0")
remove.packages("xfun", lib="~/R/win-library/4.0")
install.packages('rmarkdown')
install.packages("rmarkdown")
install.packages('rmarkdown')
remotes::install_github('rstudio/rmarkdown')
install.packages(“rmarkdown”, dep = TRUE)
install.packages('rmarkdown', dep = TRUE)
library(DBI)
library(odbc)
install.packages('odbc')
library(DBI)
library(odbc)
library(RODBC)
install.packages('RODBC')
library(RODBC)
plotLayout <- function(variable,varName) {
layout <- (paste0(variable,'F')) / (paste0(variable,'A') + paste0(variable,'B'))
layout2 <- (paste0(variable,'D') + paste0(variable,'E')) / (paste0(variable,'C'))
layout +
plot_annotation(
title = paste0(varName, " Class Land Coverage Statistics"),
caption = "Google Earth: Random Forest Model",
theme = theme(plot.title = element_text(size = 10, hjust = 1.2, face = "bold"))
)
layout2
}
plotLayout <- function(variable,varName) {
layout <- (paste0(variable,'F')) / (paste0(variable,'A') + paste0(variable,'B'))
layout2 <- (paste0(variable,'D') + paste0(variable,'E')) / (paste0(variable,'C'))
layout +
plot_annotation(
title = paste0(varName, " Class Land Coverage Statistics"),
caption = "Google Earth: Random Forest Model",
theme = theme(plot.title = element_text(size = 10, hjust = 1.2, face = "bold"))
)
layout2
}
###VEGETATION AREA
vegA <- plotThis(data,'scatter','vegetation','lst_night_mean')
###VEGETATION AREA
vegA <- plotThis(data,'scatter','vegetation','lst_night_mean')
plotThis <- function(data,type,variableA,variableB) {
year <- 'year'
if (type == 'scatter') {
data%>%
ggplot(aes_string(x = variableA, y=variableB, color = year)) +
geom_point() +
geom_smooth(method = 'lm') +
theme(text = element_text(size = 8))
} else if (type == 'boxplot') {
data%>%
ggplot(aes_string(y=variableA, x = year, fill = year, color = year)) +
geom_violin(alpha = 0.3) +
geom_boxplot(alpha = 0)  +
theme(text = element_text(size = 8))
} else if (type == 'normality') {
data%>%
ggplot(aes_string(sample = variableA)) + stat_qq() + stat_qq_line() + theme_bw() +
labs(y = paste0(variableA, 'Sample Quantiles'), x = 'Normal Theoretical Quantiles') +
theme(text = element_text(size = 8))
}
}
###VEGETATION AREA
vegA <- plotThis(data,'scatter','vegetation','lst_night_mean')
vegB <- plotThis(data,'scatter','vegetation','lst_day_mean')
rm(list = ls())
library(dplyr)
library(tidyverse)
library(magrittr)
library(ggplot2)
library(plm)
library(lattice)
library(patchwork)
library(lubridate)
library(ExPanDaR)
library(stats)
library(car)
library(xts)
library(stargazer)
library(data.table)
library(GGally)
library(knitr)
library(kableExtra)
library(tinytex)
library(data.table)
library(DBI)
library(odbc)
library(RODBC)
con <- dbConnect(odbc(),
Driver='Devart ODBC Driver for PostgreSQL',
# ^ use on local Windows development environment
# Driver='PostgreSQL',
# ^ Use on shinyapps.io deployment
Server='18.204.57.173',
Port='5432',
Database='postgres',
Uid='postgres',
Pwd='&j>n!_nL]k&wWdE>*TVds4P6')
#Query is parametrized to line and start and end date
query1 <- as.character('SELECT * FROM \"public\".\"panel_zipcode_tf\"')
dataA <- dbGetQuery(con, query1)
dataA$zipCodeYear <- paste0(dataA$zipcode,"_",dataA$year)
#Query is parametrized to line and start and end date
query2 <- as.character('SELECT * FROM \"public\".\"panel_microclimate\"')
dataB <- dbGetQuery(con, query2)
dataB$zipCodeYear <- paste0(dataB$zipcode,"_",dataB$year)
dataB <- dataB %>%
select(5:11)
data <- left_join(dataA,dataB,by='zipCodeYear')
# data <- subset(data, subset = year >= 2016)
rm(dataA,dataB)
data$zipCodeYear <- as.factor(data$zipCodeYear)
data <- subset(data, subset = zipcode != 90802)
data[,8:14] <- data[,8:14]/data$polygon_area
plotThis <- function(data,type,variableA,variableB) {
year <- 'year'
if (type == 'scatter') {
data%>%
ggplot(aes_string(x = variableA, y=variableB, color = year)) +
geom_point() +
geom_smooth(method = 'lm') +
theme(text = element_text(size = 8))
} else if (type == 'boxplot') {
data%>%
ggplot(aes_string(y=variableA, x = year, fill = year, color = year)) +
geom_violin(alpha = 0.3) +
geom_boxplot(alpha = 0)  +
theme(text = element_text(size = 8))
} else if (type == 'normality') {
data%>%
ggplot(aes_string(sample = variableA)) + stat_qq() + stat_qq_line() + theme_bw() +
labs(y = paste0(variableA, 'Sample Quantiles'), x = 'Normal Theoretical Quantiles') +
theme(text = element_text(size = 8))
}
}
data$vegetation <- data$lawn_area + data$tree_area
data$impervious <- data$impervious_area + data$soil_area + data$turf_area
#Eliminate observations with zero vegetation
data <- subset(data, subset = vegetation > 0)
#FILTER WEIRD YEARS
data <- subset(data, subset = year > 2012)
###VEGETATION AREA
vegA <- plotThis(data,'scatter','vegetation','lst_night_mean')
vegB <- plotThis(data,'scatter','vegetation','lst_day_mean')
vegC <- plotThis(data,'boxplot','vegetation')
vegD <- plotThis(data,'normality','vegetation')
vegE <- plotThis(data,'normality','log(vegetation)')
vegF <- ggplot(data = data, aes(x=vegetation)) +
geom_histogram(color='#086f69',fill='#086f69', alpha = 0.2) +
labs(title = 'Vegetation') +
theme_bw()
plotLayout <- function(variable,varName) {
layout <- (paste0(variable,'F')) / (paste0(variable,'A') + paste0(variable,'B'))
layout2 <- (paste0(variable,'D') + paste0(variable,'E')) / (paste0(variable,'C'))
layout +
plot_annotation(
title = paste0(varName, " Class Land Coverage Statistics"),
caption = "Google Earth: Random Forest Model",
theme = theme(plot.title = element_text(size = 10, hjust = 1.2, face = "bold"))
)
layout2
}
plotLayout(veg, 'Vegetation')
plotLayout <- function(variable,varName) {
layout <- (as.character(paste0(variable,'F'))) / (as.character(paste0(variable,'A'))) + (as.character(paste0(variable,'B')))
layout2 <- (as.character(paste0(variable,'D'))) + (as.character(paste0(variable,'E'))) / (as.character(paste0(variable,'C')))
layout +
plot_annotation(
title = paste0(varName, " Class Land Coverage Statistics"),
caption = "Google Earth: Random Forest Model",
theme = theme(plot.title = element_text(size = 10, hjust = 1.2, face = "bold"))
)
layout2
}
plotLayout(veg, 'Vegetation')
(as.character(paste0(variable,'F')))
(as.character(paste0(veg,'F')))
plotLayout('veg', 'Vegetation')
plotLayout <- function(variable,varName) {
layout <- (paste0(variable,'F')) / (paste0(variable,'A') + paste0(variable,'B'))
layout2 <- (paste0(variable,'D') + paste0(variable,'E')) / (paste0(variable,'C'))
layout +
plot_annotation(
title = paste0(varName, " Class Land Coverage Statistics"),
caption = "Google Earth: Random Forest Model",
theme = theme(plot.title = element_text(size = 10, hjust = 1.2, face = "bold"))
)
layout2
}
plotLayout('veg', 'Vegetation')
plotLayout <- function(variable,varName) {
layout <- as.character(paste0(variable,'F') / (paste0(variable,'A') + paste0(variable,'B')))
layout2 <- as.character((paste0(variable,'D') + paste0(variable,'E')) / paste0(variable,'C'))
layout +
plot_annotation(
title = paste0(varName, " Class Land Coverage Statistics"),
caption = "Google Earth: Random Forest Model",
theme = theme(plot.title = element_text(size = 10, hjust = 1.2, face = "bold"))
)
layout2
}
plotLayout('veg', 'Vegetation')
aggregatePlot <- function(variable,colorA,colorB) {
A <- plotThis(data,'scatter',variable,'lst_night_mean')
B <- plotThis(data,'scatter',variable,'lst_day_mean')
C <- plotThis(data,'boxplot',variable)
D <- plotThis(data,'normality',variable)
E <- plotThis(data,'normality',log(variable))
G <- ggplot(data = data, aes(x=variable)) +
geom_histogram(color=colorA,fill=colorB, alpha = 0.2) +
labs(title = variable) +
theme_bw()
}
aggregatePlot(vegetation,'#086f69','#086f69')
aggregatePlot <- function(variable,colorA,colorB) {
A <- plotThis(data,'scatter',variable,'lst_night_mean')
B <- plotThis(data,'scatter',variable,'lst_day_mean')
C <- plotThis(data,'boxplot',variable)
D <- plotThis(data,'normality',variable)
E <- plotThis(data,'normality',log(variable))
G <- ggplot(data = data, aes(x=variable)) +
geom_histogram(color=colorA,fill=colorB, alpha = 0.2) +
labs(title = variable) +
theme_bw()
}
aggregatePlot(vegetation,'#086f69','#086f69')
aggregatePlot('vegetation','#086f69','#086f69')
warnings()
warning()
warning('My spoon is too big')
warning('My spoon is too big!')
warning('My spoon is too big!')
warnings()
warnings()
warnings()
warnings()
?stargazer
??stargazer
data$lawn_area
rm(list = ls())
library(dplyr)
library(tidyverse)
library(magrittr)
library(ggplot2)
library(plm)
library(lattice)
library(patchwork)
library(lubridate)
library(ExPanDaR)
library(stats)
library(car)
library(xts)
library(stargazer)
library(data.table)
library(GGally)
library(knitr)
library(kableExtra)
library(tinytex)
library(data.table)
library(DBI)
library(odbc)
library(RODBC)
library(sandwich)
library(lmtest)
con <- dbConnect(odbc(),
Driver='Devart ODBC Driver for PostgreSQL',
# ^ use on local Windows development environment
# Driver='PostgreSQL',
# ^ Use on shinyapps.io deployment
Server='18.204.57.173',
Port='5432',
Database='postgres',
Uid='postgres',
Pwd='&j>n!_nL]k&wWdE>*TVds4P6')
#Query is parametrized to line and start and end date
query1 <- as.character('SELECT * FROM \"public\".\"panel_zipcode\"')
dataA <- dbGetQuery(con, query1)
dataA$zipCodeYear <- paste0(dataA$zipcode,"_",dataA$year)
#Query is parametrized to line and start and end date
query2 <- as.character('SELECT * FROM \"public\".\"panel_microclimate\"')
dataB <- dbGetQuery(con, query2)
dataB$zipCodeYear <- paste0(dataB$zipcode,"_",dataB$year)
dataB <- dataB %>%
select(5:11)
data <- left_join(dataA,dataB,by='zipCodeYear')
# data <- subset(data, subset = year >= 2016)
rm(dataA,dataB)
data$zipCodeYear <- as.factor(data$zipCodeYear)
data <- subset(data, subset = zipcode != 90802)
data[,8:14] <- data[,8:14]/data$polygon_area
plotThis <- function(data,type,variableA,variableB) {
year <- 'year'
if (type == 'scatter') {
data%>%
ggplot(aes_string(x = variableA, y=variableB, color = year)) +
geom_point(size = 0.1) +
geom_smooth(method = 'lm') +
theme(text = element_text(size = 8))
} else if (type == 'boxplot') {
data%>%
ggplot(aes_string(y=variableA, x = year, fill = year, color = year)) +
geom_violin(alpha = 0.3) +
geom_boxplot(alpha = 0)  +
theme(text = element_text(size = 8))
} else if (type == 'normality') {
data%>%
ggplot(aes_string(sample = variableA)) + stat_qq() + stat_qq_line() + theme_bw() +
labs(y = paste0(variableA, 'Sample Quantiles'), x = 'Normal Theoretical Quantiles') +
theme(text = element_text(size = 8))
}
}
data$vegetation <- data$lawn_area + data$tree_area
data$impervious <- data$impervious_area + data$soil_area + data$turf_area
#Eliminate observations with zero vegetation
data <- subset(data, subset = vegetation > 0)
#FILTER WEIRD YEARS
# data <- subset(data, subset = year > 2012)
plotLayoutA <- function(varName) {
layout <- G / (A + B)
layout +
plot_annotation(
# title = paste0(varName, " Class Land Coverage Statistics"),
# theme = theme(plot.title = element_text(size = 10, hjust = 0.3, face = "bold"))
)
}
plotLayoutB <- function(varName) {
layout2 <- (D + E) / C
layout2 +
plot_annotation(
caption = "Google Earth: Random Forest Model"
)
}
###VEGETATION AREA
A <- plotThis(data,'scatter','vegetation','lst_night_mean')
B <- plotThis(data,'scatter','vegetation','lst_day_mean')
C <- plotThis(data,'boxplot','vegetation')
D <- plotThis(data,'normality','vegetation')
E <- plotThis(data,'normality','log(vegetation)')
G <- ggplot(data = data, aes(x=vegetation)) +
geom_histogram(color='#086f69',fill='#086f69', alpha = 0.2) +
labs(title = 'Vegetation') +
theme_bw()
plotLayoutA('Vegetation')
plotLayoutB('Vegetation')
###IMPERVIOUS AREA
A <- plotThis(data,'scatter','impervious','lst_night_mean')
B <- plotThis(data,'scatter','impervious','lst_day_mean')
C <- plotThis(data,'boxplot','impervious')
D <- plotThis(data,'normality','impervious')
E <- plotThis(data,'normality','log(impervious)')
G <- ggplot(data = data, aes(x=impervious)) +
geom_histogram(color='#7c807c',fill='#7c807c', alpha = 0.2) +
labs(title = 'Impervious') +
theme_bw()
plotLayoutA('Impervious')
plotLayoutB('Impervious')
data <- subset(data, subset = year > 2012)
# Create panel dataframe object
microClimatePanel <- pdata.frame(data, index=c("zipcode", "year"))
OLSM1 <- lm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + soil_area +
turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
data = microClimatePanel)
stargazer::stargazer(OLSM1, single.row = TRUE, title = 'OLS Model')
feM1 <- plm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + soil_area +
turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'within')
stargazer::stargazer(feM1, single.row = TRUE, title = 'Fixed Effects Model')
pFtest(feM1, OLSM1)
## Fixed effects is a better choice than OLS
reM1 <- plm(
log(lst_day_mean) ~ 0 + factor(year) + tree_area + lawn_area + water_area + soil_area +
turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'random')
reM1 <- plm(
log(lst_day_mean) ~ 0 + tree_area + lawn_area + water_area + soil_area +
turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'random')
stargazer::stargazer(reM1, single.row = TRUE, title = 'Random Effects Model')
reM1 <- plm(
log(lst_day_mean) ~ 0 + year + tree_area + lawn_area + water_area + soil_area +
turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'random')
reM1 <- plm(
log(lst_day_mean) ~ 0 + tree_area + lawn_area + water_area + soil_area +
turf_area + grass_ndvi_mean + tree_ndvi_mean + grass_ndvi_max + tree_ndvi_max + grass_ndvi_min + tree_ndvi_min,
index = c(zipcode, year), data = microClimatePanel, model = 'random')
stargazer::stargazer(reM1, single.row = TRUE, title = 'Random Effects Model')
tinytex::reinstall_tinytex(repository = "illinois")
